return {
  'nvim-treesitter/nvim-treesitter',
  build = ':TSUpdate',
  dependencies = {}, -- –í–ê–ñ–õ–ò–í–û: –º–∞—î –±—É—Ç–∏ —Å–ø–∏—Å–æ–∫, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π
  opts = {
    ensure_installed = {
      'lua', 'python', 'javascript', 'typescript', 'vimdoc', 'vim',
      'regex', 'terraform', 'sql', 'dockerfile', 'toml', 'json', 'java',
      'groovy', 'go', 'gitignore', 'graphql', 'yaml', 'make', 'cmake',
      'markdown', 'markdown_inline', 'bash', 'tsx', 'css', 'html'
    },
    auto_install = true,
    highlight = { enable = true, additional_vim_regex_highlighting = { 'ruby' } },
    indent = { enable = true, disable = { 'ruby' } },
  },
  config = function(_, opts)
    require('nvim-treesitter.configs').setup(opts)

    -- üîπ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–ª–∞—Å—ñ–≤ —ñ–∑ –≤–∏–¥—ñ–ª–µ–Ω–æ–≥–æ HTML —É CSS
    function _G.ExtractSelectedHtmlClasses()
        local classes = {}

        -- –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–¥—ñ–ª–µ–Ω–∏–π —Ç–µ–∫—Å—Ç
        local start_line, start_col = unpack(vim.fn.getpos("'<"), 2, 3)
        local end_line, end_col = unpack(vim.fn.getpos("'>"), 2, 3)

        local selected_lines = vim.fn.getline(start_line, end_line)
        if #selected_lines == 0 then return end

        -- –í–∏—Ä—ñ–∑–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É —á–∞—Å—Ç–∏–Ω—É –¥–ª—è –ø–µ—Ä—à–æ–≥–æ —Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ä—è–¥–∫–∞
        selected_lines[1] = string.sub(selected_lines[1], start_col)
        selected_lines[#selected_lines] = string.sub(selected_lines[#selected_lines], 1, end_col)

        -- –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω —Ä—è–¥–æ–∫ —ñ —à—É–∫–∞—î–º–æ –∫–ª–∞—Å–∏
        for _, line in ipairs(selected_lines) do
            for class_list in line:gmatch('class="(.-)"') do
                for class_name in class_list:gmatch("%S+") do
                    classes[class_name] = true
                end
            end
        end

        -- üîπ –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö CSS-—Ñ–∞–π–ª—ñ–≤ —É –ø—Ä–æ—î–∫—Ç—ñ
        local css_files = vim.fn.globpath(vim.fn.getcwd(), "**/*.css", false, true)

        if #css_files == 0 then
            print("‚ùå CSS-—Ñ–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return
        end

        -- üîπ –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –≤–∏–±–æ—Ä—É
        vim.ui.select(css_files, {
            prompt = "–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–ª–∞—Å—ñ–≤:",
        }, function(selected_file)
            if not selected_file then
                print("‚ùå –§–∞–π–ª –Ω–µ –≤–∏–±—Ä–∞–Ω–æ, –æ–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
                return
            end

            local existing_classes = {}

            -- –Ø–∫—â–æ —Ñ–∞–π–ª —ñ—Å–Ω—É—î, –∑—á–∏—Ç—É—î–º–æ –π–æ–≥–æ –≤–º—ñ—Å—Ç
            if vim.fn.filereadable(selected_file) == 1 then
                local lines = vim.fn.readfile(selected_file)
                for _, line in ipairs(lines) do
                    local existing_class = line:match("^%s*%.([%w%-_]+)%s*{")
                    if existing_class then
                        existing_classes[existing_class] = true
                    end
                end
            end

            -- –§–æ—Ä–º—É—î–º–æ CSS-–∫–æ–¥, –¥–æ–¥–∞—é—á–∏ —Ç—ñ–ª—å–∫–∏ –Ω–æ–≤—ñ –∫–ª–∞—Å–∏
            local css_lines = vim.fn.readfile(selected_file) or {}
            for class_name, _ in pairs(classes) do
                if not existing_classes[class_name] then
                    table.insert(css_lines, "." .. class_name .. " {}")
                end
            end

            -- –ó–∞–ø–∏—Å—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π CSS —É –≤–∏–±—Ä–∞–Ω–∏–π —Ñ–∞–π–ª
            vim.fn.writefile(css_lines, selected_file)

            print("‚úÖ CSS-—Ñ–∞–π–ª –æ–Ω–æ–≤–ª–µ–Ω–æ: " .. selected_file)

            -- –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π CSS-—Ñ–∞–π–ª —É Neovim
            vim.cmd(string.format("edit %s", selected_file))
        end)
    end

    -- üîπ –ü—Ä–∏–≤‚Äô—è–∑—É—î–º–æ –¥–æ Visual Mode (–≤–∏–¥—ñ–ª–µ–Ω–Ω—è + <leader>ec)
    vim.api.nvim_set_keymap("v", "<leader>ec", ":lua ExtractSelectedHtmlClasses()<CR>", { noremap = true, silent = true })
  end,
}

